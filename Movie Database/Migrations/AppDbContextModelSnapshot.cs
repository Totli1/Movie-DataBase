// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movie_Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Movie_Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.Property<int>("Countriesid")
                        .HasColumnType("integer");

                    b.Property<int>("Moviesid")
                        .HasColumnType("integer");

                    b.HasKey("Countriesid", "Moviesid");

                    b.HasIndex("Moviesid");

                    b.ToTable("CountryMovie");
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.Property<int>("Genresid")
                        .HasColumnType("integer");

                    b.Property<int>("Moviesid")
                        .HasColumnType("integer");

                    b.HasKey("Genresid", "Moviesid");

                    b.HasIndex("Moviesid");

                    b.ToTable("GenreMovie");
                });

            modelBuilder.Entity("Movie_Database.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Movie_Database.Genre", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Movie_Database.Movie", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("kinopoisk_id")
                        .HasColumnType("integer");

                    b.Property<string>("name_ru")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("rating_imdb")
                        .HasColumnType("double precision");

                    b.Property<int?>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("movies", (string)null);
                });

            modelBuilder.Entity("CountryMovie", b =>
                {
                    b.HasOne("Movie_Database.Country", null)
                        .WithMany()
                        .HasForeignKey("Countriesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Database.Movie", null)
                        .WithMany()
                        .HasForeignKey("Moviesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovie", b =>
                {
                    b.HasOne("Movie_Database.Genre", null)
                        .WithMany()
                        .HasForeignKey("Genresid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movie_Database.Movie", null)
                        .WithMany()
                        .HasForeignKey("Moviesid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
